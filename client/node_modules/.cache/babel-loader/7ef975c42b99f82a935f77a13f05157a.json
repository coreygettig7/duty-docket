{"ast":null,"code":"import decode from 'jwt-decode';\n\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  } // check if the user is still logged in\n\n\n  loggedIn() {\n    const token = this.getToken(); //type recursion\n\n    return !!token && !this.isTokenExpired(token);\n  } // check if token has expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  } // retrieve token from localStorage\n\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  } // set token to localStorage and reload page to dashboard\n\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/dashboard');\n  } // addUser(idToken) {\n  //   localStorage.setItem('id_token', idToken);\n  //   window.location.assign('/dashboard');\n  // }\n  // clear token from localStorage and force logout\n\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["/Users/nicolamarble/Desktop/projects/duty-docket/client/src/utils/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n  // check if the user is still logged in\n  loggedIn() {\n    const token = this.getToken();\n    //type recursion\n    return !!token && !this.isTokenExpired(token);\n  }\n  // check if token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch(err) {\n      return false;\n    }\n  }\n  // retrieve token from localStorage\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n  // set token to localStorage and reload page to dashboard\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/dashboard');\n  }\n  // addUser(idToken) {\n  //   localStorage.setItem('id_token', idToken);\n  //   window.location.assign('/dashboard');\n  // }\n  // clear token from localStorage and force logout\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;EAChB;EACAC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACD,CAJe,CAKhB;;;EACAC,QAAQ,GAAG;IACT,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd,CADS,CAET;;IACA,OAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB;EACD,CAVe,CAWhB;;;EACAC,cAAc,CAACD,KAAD,EAAQ;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;MACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QACnC,OAAO,IAAP;MACD,CAFD,MAEO;QACL,OAAO,KAAP;MACD;IACF,CAPD,CAOE,OAAMC,GAAN,EAAW;MACX,OAAO,KAAP;IACD;EACF,CAvBe,CAwBhB;;;EACAR,QAAQ,GAAG;IACT,OAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;EACD,CA3Be,CA4BhB;;;EACAC,KAAK,CAACC,OAAD,EAAU;IACbH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IACAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,YAAvB;EACD,CAhCe,CAiChB;EACA;EACA;EACA;EACA;;;EACAC,MAAM,GAAG;IACPR,YAAY,CAACS,UAAb,CAAwB,UAAxB;IACAJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;AAzCe;;AA4ClB,eAAe,IAAIlB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}